/* eslint-disable */
export default class WorldClockTimeZones {

  /**
   * Timezones and regions
   *
   * @see https://ja.wikipedia.org/wiki/%E6%99%82%E9%96%93%E5%B8%AF_(%E6%A8%99%E6%BA%96%E6%99%82)
   * @todo Internationalization
   */
  static get LIST() {
    return [
      {utc: '+1400', offsetMin: 840, regions: ['キリバス - ライン諸島']},
      {utc: '+1300', offsetMin: 780, regions: ['キリバス - フェニックス諸島', 'サモア', 'トンガ', 'トケラウ（ニュージーランド領）']},
      {utc: '+1245', offsetMin: 765, regions: ['ニュージーランド - チャタム諸島']},
      {utc: '+1200', offsetMin: 720, regions: ['ウェーク島（アメリカ合衆国領）', 'ウォリス・フツナ（フランス領）', 'キリバス - ギルバート諸島', 'ツバル', 'ナウル', 'ニュージーランド', 'フィジー', 'マーシャル諸島', 'ロシアカムチャツカ時間 - PETT', '南極点・アムンゼン・スコット基地']},
      {utc: '+1100', offsetMin: 660, regions: ['ソロモン諸島', 'ニューカレドニア（フランス領）', 'ノーフォーク島（オーストラリア領）', 'パプアニューギニア - ブーゲンビル自治州', 'バヌアツ', 'ミクロネシア連邦 - コスラエ州', 'ミクロネシア連邦 - ポンペイ州', 'ロシア・マガダン時間 - MAGT']},
      {utc: '+1030', offsetMin: 630, regions: ['オーストラリア - ニューサウスウェールズ州ロード・ハウ島（夏時間は、+30分）']},
      {utc: '+1000', offsetMin: 600, regions: ['オーストラリア東部標準時 - AEST - オーストラリア首都特別地域, ニューサウスウェールズ州（ブロークンヒル、ロード・ハウ島を除く）, クイーンズランド州, ビクトリア州, タスマニア州', 'チャモロ標準時 - 北マリアナ諸島（アメリカ合衆国領）, グアム島（アメリカ合衆国領）', 'パプアニューギニア', 'ミクロネシア連邦 - チューク州, ヤップ州', 'ロシアウラジオストク時間 - VLAT']},
      {utc: '+0930', offsetMin: 570, regions: ['オーストラリア中部標準時 - ACST - ニューサウスウェールズ州ブロークンヒル, ノーザンテリトリー, 南オーストラリア州']},
      {utc: '+0900', offsetMin: 540, regions: ['日本標準時 - JST - 日本', 'インドネシア（東部）', '韓国標準時 - KST - 韓国', '平壌時間 - PYT - 北朝鮮', 'パラオ', '東ティモール', 'ロシアヤクーツク時間 - YAKT']},
      {utc: '+0845', offsetMin: 525, regions: ['オーストラリア - 西オーストラリア州（南東部の一部）']},
      {utc: '+0800', offsetMin: 480, regions: ['インドネシア（中部）', 'オーストラリア西部標準時 - AWST - 西オーストラリア州（南東部の一部以外全域）', 'シンガポール', '中国標準時 - 中華人民共和国, 香港, マカオ', '台湾標準時 - 中華民国（台湾）', 'フィリピン', 'ブルネイ', 'マレーシア', 'モンゴル国（ほぼ全域）', 'ロシアイルクーツク時間 - IRKT']},
      {utc: '+0700', offsetMin: 420, regions: ['インドネシア（西部）', 'カンボジア', 'クリスマス島（オーストラリア領）', 'タイ', 'ベトナム', 'モンゴル（西部）', 'ラオス', 'ロシアクラスノヤルスク時間 - KRAT']},
      {utc: '+0630', offsetMin: 390, regions: ['ココス諸島（オーストラリア領）', 'ミャンマー']},
      {utc: '+0600', offsetMin: 360, regions: ['カザフスタン（東部）', 'キルギスタン', 'バングラデシュ', 'ブータン', 'ロシアオムスク時間 - OMST']},
      {utc: '+0545', offsetMin: 345, regions: ['ネパール']},
      {utc: '+0530', offsetMin: 330, regions: ['インド標準時 - IST - インド', 'スリランカ']},
      {utc: '+0500', offsetMin: 300, regions: ['イギリス領インド洋地域', 'ウズベキスタン', 'カザフスタン（西部）', 'タジキスタン', 'トルクメニスタン', 'ハード島とマクドナルド諸島（オーストラリア領）', 'パキスタン', 'モルディブ', 'ロシアエカテリンブルク時間 - YEKT']},
      {utc: '+0430', offsetMin: 270, regions: ['アフガニスタン']},
      {utc: '+0400', offsetMin: 240, regions: ['アゼルバイジャン', 'アラブ首長国連邦', 'アルメニア', 'オマーン', 'ジョージア', 'セーシェル', 'モーリシャス', 'レユニオン（フランス領）', 'ロシアサマラ時間 - SAMT']},
      {utc: '+0330', offsetMin: 210, regions: ['イラン']},
      {utc: '+0300', offsetMin: 180, regions: ['イエメン', 'イラク', 'ウガンダ', 'エチオピア', 'エリトリア', 'カタール', 'クウェート', 'ケニア', 'コモロ', 'サウジアラビア', 'ジブチ', 'ソマリア', 'タンザニア', 'トルコ', 'バーレーン', 'ベラルーシ', 'マダガスカル', 'マヨット（フランス領）', 'ロシアモスクワ時間 - MSK']},
      {utc: '+0200', offsetMin: 120, regions: ['イスラエル', 'ウクライナ', 'コンゴ民主共和国 - 東部州, 西カサイ州, 東カサイ州, カタンガ州, 北キブ州, マニエマ州, 南キブ州', 'ザンビア', 'シリア', 'ジンバブエ', 'スーダン', 'スワジランド', 'パレスチナ（ガザ地区およびヨルダン川西岸地区）', '南スーダン', '東ヨーロッパ時間 - EET - エストニア, キプロス, ギリシャ, フィンランド, ブルガリア, ラトビア, リトアニア, ルーマニア', 'エジプト', 'ブルンジ', 'ボツワナ', 'マラウイ', '南アフリカ共和国', 'モザンビーク', 'モルドバ', 'ナミビア', 'ヨルダン', 'リビア', 'ルワンダ', 'レソト', 'レバノン', 'ロシアカリーニングラード時間 - USZ1']},
      {utc: '+0100', offsetMin:  60, regions: ['アンゴラ', 'ガボン', 'カメルーン', 'コンゴ共和国', 'コンゴ民主共和国 - キンシャサ, 赤道州, バ・コンゴ州, バンドゥンドゥ州,', '赤道ギニア', 'チャド', '中央アフリカ', '中央ヨーロッパ時間 - CET or MET ※30ヶ国と1地域 - アルジェリア, アルバニア, アンドラ, イタリア, オーストリア, オランダ, クロアチア, サンマリノ, ジブラルタル（イギリス領）, スイス, スウェーデン, スペイン （カナリア諸島を除く）, スロバキア, スロベニア, セルビア, チェコ, チュニジア, デンマーク, ドイツ, ノルウェー （スバールバル諸島・ヤンマイエン島を含む）, バチカン, ハンガリー, フランス, ベルギー, ボスニア・ヘルツェゴビナ, ポーランド, マケドニア, マルタ, モナコ, モンテネグロ, リヒテンシュタイン, ルクセンブルク', 'ナイジェリア', '西サハラ', 'ニジェール', 'ベナン', 'モロッコ']},
      {utc:  '0000', offsetMin:   0, regions: ['コートジボワール', 'ガンビア', 'ガーナ', 'ギニア', 'ギニアビサウ', 'グリーンランド（北東部）（デンマーク領）', 'サントメ・プリンシペ', 'シエラレオネ', 'セネガル', 'セントヘレナ（イギリス領）', 'トーゴ', '西ヨーロッパ時間 - WET ※4ヶ国・2地域 - アイスランド, アイルランド, イギリス - グリニッジ標準時 (GMT) / 英国夏時間 (BST), スペイン（カナリア諸島）, フェロー諸島（デンマーク領）, ポルトガル', 'ブーベ島（ノルウェー領）', 'ブルキナファソ', 'マリ', 'モーリタニア', 'リベリア']},
      {utc: '-0100', offsetMin: -60, regions: ['カーボベルデ', 'グリーンランド（東部）（デンマーク領）', 'ポルトガル（アゾレス諸島）']},
      {utc: '-0200', offsetMin:-120, regions: ['サウスジョージア・サウスサンドウィッチ諸島（イギリス領）', 'ブラジル（海洋諸島 - フェルナンド・デ・ノローニャ島、他）']},
      {utc: '-0300', offsetMin:-180, regions: ['アルゼンチン', 'ウルグアイ', 'グリーンランド（南海岸、南西海岸）（デンマーク領）', 'サンピエール・ミクロン（フランス領）', 'スリナム', 'チリ - マガジャネス・イ・デ・ラ・アンタルティカ・チレーナ州', 'ブラジル - アマパ州, アラゴアス州, エスピリトサント州, ゴイアス州, サンタカタリーナ州, サンパウロ州, セアラ州, セルジッペ州, トカンチンス州, バイーア州, パラ州（東部）, パライバ州, パラナ州, ピアウイ州, ブラジリア連邦直轄区, ペルナンブーコ州, マラニョン州, ミナスジェライス州, リオグランデドスル州, リオグランデドノルチ州, リオデジャネイロ州', 'フランス領ギアナ']},
      {utc: '-0330', offsetMin:-210, regions: ['ニューファンドランド標準時 - NST - カナダ - ニューファンドランド・ラブラドール州（ニューファンドランド島、ラブラドール半島南端部）']},
      {utc: '-0400', offsetMin:-240, regions: ['アルバ（オランダ領）', 'アンギラ（イギリス領）', 'アンティグア・バーブーダ', 'イギリス領ヴァージン諸島', 'オランダ領アンティル', 'ガイアナ', 'グアドループ（フランス領）', 'グリーンランド（北西部）（デンマーク領）', 'グレナダ', 'セントクリストファー・ネイビス', 'セントビンセントおよびグレナディーン諸島', 'セント・ルシア', 'ベネズエラ', '（アメリカ・カナダ）大西洋標準時 - AST　「東海岸時間」とも - アメリカ領ヴァージン諸島 / カナダ - ケベック州（東部）, ニューファンドランド・ラブラドール州（ラブラドール半島部分のほぼ全域）, ニューブランズウィック州, ノバスコシア州, プリンスエドワードアイランド州 / バミューダ諸島 / プエルトリコ（アメリカ合衆国領）', 'チリ（マガジャネス・イ・デ・ラ・アンタルティカ・チレーナ州を除く）', 'ドミニカ国', 'ドミニカ共和国', 'トリニダード・トバゴ', 'パラグアイ', 'バルバドス', 'フォークランド諸島（イギリス領）', 'ブラジル - アマゾナス州（南西部を除く）, パラ州（西部）, マトグロッソ州, マトグロッソスル州, ロライマ州, ロンドニア州', 'ボリビア', 'マルティニーク（フランス領）', 'モントセラト（イギリス領）']},
      {utc: '-0500', offsetMin:-300, regions: ['エクアドル', 'キューバ', 'ケイマン諸島（イギリス領）', 'コロンビア', 'ジャマイカ', 'タークス諸島・カイコス諸島（イギリス領）', '（アメリカ・カナダ）東部標準時 - EST - アメリカ合衆国 - インディアナ州（一部例外あり）, ウェストバージニア州, オハイオ州, ケンタッキー州（東部）, コネチカット州, サウスカロライナ州, ジョージア州, テネシー州（東部）, デラウェア州, ニュージャージー州, ニューハンプシャー州, ニューヨーク州, ノースカロライナ州, バージニア州, バーモント州, フロリダ州（一部例外あり）, ペンシルベニア州, マサチューセッツ州, ミシガン州（一部例外あり）, メイン州, メリーランド州, ロードアイランド州, ワシントンD.C. / カナダ - オンタリオ州（西経90°以東、一部例外あり。一部夏時間なし） ヌナブト準州（西経85°以東、サウサンプトン島のみは夏時間なし） ケベック州（ほぼ全域）', 'メキシコ - キンタナ・ロー州', 'ハイチ', 'パナマ', 'バハマ', 'ブラジル - アクレ州, アマゾナス州 (南西部)', 'ペルー']},
      {utc: '-0600', offsetMin:-360, regions: ['エクアドル（ガラパゴス諸島）', 'エルサルバドル', 'グアテマラ', 'コスタリカ', '（アメリカ・カナダ）中部標準時 - CST - アメリカ合衆国 - アーカンソー州, アイオワ州, アラバマ州, イリノイ州, インディアナ州（北西部、南西部）, ウィスコンシン州, オクラホマ州（ほぼ全域）, カンザス州（ほぼ全域）, ケンタッキー州（西部）, サウスダコタ州（東部）, テキサス州（ほぼ全域）, テネシー州（中部、西部）, ネブラスカ州（中部、東部）, ノースダコタ州（ほぼ全域）, フロリダ州（西端部）, ミシガン州（一部）, ミシシッピ州, ミズーリ州, ミネソタ州, ルイジアナ州 / カナダ - オンタリオ州（西経90°以西、一部例外あり）, サスカチュワン州（ほぼ全域）, ヌナブト準州（西経85°から102°まで。一部例外あり）, マニトバ州', 'チリ - イースター島', 'ニカラグア', 'ベリーズ', 'ホンジュラス', 'メキシコ（UTC -5, -7, -8に列記したもの以外）']},
      {utc: '-0700', offsetMin:-420, regions: ['（アメリカ・カナダ）山岳部標準時 - MST - アメリカ合衆国 - アイダホ州（南部）, アリゾナ州（ナバホ族居住地では夏時間を採用）, オクラホマ州（ケントン町のみ）, オレゴン州（マラー国立野生動物保護公園のみ）, カンザス州（西端部4郡）, コロラド州, サウスダコタ州（西部）, テキサス州（西端部3郡）, ニューメキシコ州, ネバダ州（ダックバレーインディアン居留地など）, ネブラスカ州（西部）, ノースダコタ州（南西部）, モンタナ州, ユタ州, ワイオミング州 / カナダ - アルバータ州, ブリティッシュコロンビア州（北西部、北東部）, ノースウェスト準州, サスカチュワン州（ロイドミンスター）, ヌナブト準州（西経102°以西）, ユーコン準州', 'メキシコ - シナロア州, ソノラ州, ナヤリット州（ほぼ全域）, チワワ州, バハ・カリフォルニア・スル州']},
      {utc: '-0800', offsetMin:-480, regions: ['（アメリカ・カナダ）太平洋標準時 - PST　「西海岸時間」とも - アメリカ合衆国 - アイダホ州（北部）, オレゴン州（ほぼ全域）, カリフォルニア州, ネバダ州（ほぼ全域）, ワシントン州 / カナダ - ブリティッシュコロンビア州（ほぼ全域）', 'ピトケアン諸島（イギリス領）', 'メキシコ - バハ・カリフォルニア州']},
      {utc: '-0900', offsetMin:-540, regions: ['アラスカ標準時 - AKST - アメリカ合衆国 - アラスカ州（アリューシャン列島を除く）', 'フランス領ポリネシア（ガンビエ諸島）']},
      {utc: '-0930', offsetMin:-570, regions: ['フランス領ポリネシア（マルケサス諸島）']},
      {utc: '-1000', offsetMin:-600, regions: ['クック諸島（ニュージーランド自由連合）', 'ジョンストン島（アメリカ合衆国領）', 'ハワイ・アリューシャン標準時 - HAST(HST) - アメリカ合衆国 - アラスカ州（アリューシャン列島、西経169°30\'以西）, ハワイ州', 'フランス領ポリネシア（ソシエテ諸島、ツアモツ諸島、トゥブアイ諸島）']},
      {utc: '-1100', offsetMin:-660, regions: ['アメリカ領サモア', 'ニウエ（ニュージーランド自由連合）', 'ミッドウェイ諸島（アメリカ合衆国領）']},
      {utc: '-1200', offsetMin:-720, regions: ['ベーカー島（アメリカ合衆国領）', 'ハウランド島（アメリカ合衆国領）']}
    ];
  }

  static get HOUR_LIST() {
    return [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
      13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
    ];
  }

  /**
   * Color definitions
   *
   * Use mapping tables
   * https://docs.google.com/spreadsheets/d/1j9msYK4e32MUW27jrlRUlzptMk5_LM_eG3TkGEVBODM/edit?usp=sharing
   *
   * noon    : #7ae0ff rgb(120, 220, 255) / decimal 8052991
   * midnight: #0a191e rgb( 10,  25,  30) / decimal 661790
   * diff    : 110, 195, 225 / deimal 7391201
   *
   * 86400sec. 1440min. 24hrs. / 43200sec. 720min. 12hrs.
   *
   * 7391201 / 43200 = 171.09261574
   * 7391201 / 720 = 10265.5569444...
   */
  static get COLOR_DEFINITIONS() {
    return [
      ['0000', 'rgb(10, 25, 30)'],
      ['0010', 'rgb(12, 28, 33)'],
      ['0020', 'rgb(13, 30, 36)'],
      ['0030', 'rgb(15, 33, 39)'],
      ['0040', 'rgb(16, 36, 43)'],
      ['0050', 'rgb(18, 39, 46)'],
      ['0100', 'rgb(19, 41, 49)'],
      ['0110', 'rgb(21, 44, 52)'],
      ['0120', 'rgb(22, 47, 55)'],
      ['0130', 'rgb(24, 49, 58)'],
      ['0140', 'rgb(25, 52, 61)'],
      ['0150', 'rgb(27, 55, 64)'],
      ['0200', 'rgb(28, 58, 68)'],
      ['0210', 'rgb(30, 60, 71)'],
      ['0220', 'rgb(31, 63, 74)'],
      ['0230', 'rgb(33, 66, 77)'],
      ['0240', 'rgb(34, 68, 80)'],
      ['0250', 'rgb(36, 71, 83)'],
      ['0300', 'rgb(38, 74, 86)'],
      ['0310', 'rgb(39, 76, 89)'],
      ['0320', 'rgb(41, 79, 93)'],
      ['0330', 'rgb(42, 82, 96)'],
      ['0340', 'rgb(44, 85, 99)'],
      ['0350', 'rgb(45, 87, 102)'],
      ['0400', 'rgb(47, 90, 105)'],
      ['0410', 'rgb(48, 93, 108)'],
      ['0420', 'rgb(50, 95, 111)'],
      ['0430', 'rgb(51, 98, 114)'],
      ['0440', 'rgb(53, 101, 118)'],
      ['0450', 'rgb(54, 104, 121)'],
      ['0500', 'rgb(56, 106, 124)'],
      ['0510', 'rgb(57, 109, 127)'],
      ['0520', 'rgb(59, 112, 130)'],
      ['0530', 'rgb(60, 114, 133)'],
      ['0540', 'rgb(62, 117, 136)'],
      ['0550', 'rgb(63, 120, 139)'],
      ['0600', 'rgb(65, 123, 143)'],
      ['0610', 'rgb(67, 125, 146)'],
      ['0620', 'rgb(68, 128, 149)'],
      ['0630', 'rgb(70, 131, 152)'],
      ['0640', 'rgb(71, 133, 155)'],
      ['0650', 'rgb(73, 136, 158)'],
      ['0700', 'rgb(74, 139, 161)'],
      ['0710', 'rgb(76, 141, 164)'],
      ['0720', 'rgb(77, 144, 168)'],
      ['0730', 'rgb(79, 147, 171)'],
      ['0740', 'rgb(80, 150, 174)'],
      ['0750', 'rgb(82, 152, 177)'],
      ['0800', 'rgb(83, 155, 180)'],
      ['0810', 'rgb(85, 158, 183)'],
      ['0820', 'rgb(86, 160, 186)'],
      ['0830', 'rgb(88, 163, 189)'],
      ['0840', 'rgb(89, 166, 193)'],
      ['0850', 'rgb(91, 169, 196)'],
      ['0900', 'rgb(92, 171, 199)'],
      ['0910', 'rgb(94, 174, 202)'],
      ['0920', 'rgb(96, 177, 205)'],
      ['0930', 'rgb(97, 179, 208)'],
      ['0940', 'rgb(99, 182, 211)'],
      ['0950', 'rgb(100, 185, 214)'],
      ['1000', 'rgb(102, 188, 218)'],
      ['1010', 'rgb(103, 190, 221)'],
      ['1020', 'rgb(105, 193, 224)'],
      ['1030', 'rgb(106, 196, 227)'],
      ['1040', 'rgb(108, 198, 230)'],
      ['1050', 'rgb(109, 201, 233)'],
      ['1100', 'rgb(111, 204, 236)'],
      ['1110', 'rgb(112, 206, 239)'],
      ['1120', 'rgb(114, 209, 243)'],
      ['1130', 'rgb(115, 212, 246)'],
      ['1140', 'rgb(117, 215, 249)'],
      ['1150', 'rgb(118, 217, 252)'],
      ['1200', 'rgb(120, 220, 255)'],
      ['1210', 'rgb(118, 217, 252)'],
      ['1220', 'rgb(117, 215, 249)'],
      ['1230', 'rgb(115, 212, 246)'],
      ['1240', 'rgb(114, 209, 243)'],
      ['1250', 'rgb(112, 206, 239)'],
      ['1300', 'rgb(111, 204, 236)'],
      ['1310', 'rgb(109, 201, 233)'],
      ['1320', 'rgb(108, 198, 230)'],
      ['1330', 'rgb(106, 196, 227)'],
      ['1340', 'rgb(105, 193, 224)'],
      ['1350', 'rgb(103, 190, 221)'],
      ['1400', 'rgb(102, 188, 218)'],
      ['1410', 'rgb(100, 185, 214)'],
      ['1420', 'rgb(99, 182, 211)'],
      ['1430', 'rgb(97, 179, 208)'],
      ['1440', 'rgb(96, 177, 205)'],
      ['1450', 'rgb(94, 174, 202)'],
      ['1500', 'rgb(93, 171, 199)'],
      ['1510', 'rgb(91, 169, 196)'],
      ['1520', 'rgb(89, 166, 193)'],
      ['1530', 'rgb(88, 163, 189)'],
      ['1540', 'rgb(86, 160, 186)'],
      ['1550', 'rgb(85, 158, 183)'],
      ['1600', 'rgb(83, 155, 180)'],
      ['1610', 'rgb(82, 152, 177)'],
      ['1620', 'rgb(80, 150, 174)'],
      ['1630', 'rgb(79, 147, 171)'],
      ['1640', 'rgb(77, 144, 168)'],
      ['1650', 'rgb(76, 141, 164)'],
      ['1700', 'rgb(74, 139, 161)'],
      ['1710', 'rgb(73, 136, 158)'],
      ['1720', 'rgb(71, 133, 155)'],
      ['1730', 'rgb(70, 131, 152)'],
      ['1740', 'rgb(68, 128, 149)'],
      ['1750', 'rgb(67, 125, 146)'],
      ['1800', 'rgb(65, 123, 143)'],
      ['1810', 'rgb(63, 120, 139)'],
      ['1820', 'rgb(62, 117, 136)'],
      ['1830', 'rgb(60, 114, 133)'],
      ['1840', 'rgb(59, 112, 130)'],
      ['1850', 'rgb(57, 109, 127)'],
      ['1900', 'rgb(56, 106, 124)'],
      ['1910', 'rgb(54, 104, 121)'],
      ['1920', 'rgb(53, 101, 118)'],
      ['1930', 'rgb(51, 98, 114)'],
      ['1940', 'rgb(50, 95, 111)'],
      ['1950', 'rgb(48, 93, 108)'],
      ['2000', 'rgb(47, 90, 105)'],
      ['2010', 'rgb(45, 87, 102)'],
      ['2020', 'rgb(44, 85, 99)'],
      ['2030', 'rgb(42, 82, 96)'],
      ['2040', 'rgb(41, 79, 93)'],
      ['2050', 'rgb(39, 76, 89)'],
      ['2100', 'rgb(38, 74, 86)'],
      ['2110', 'rgb(36, 71, 83)'],
      ['2120', 'rgb(34, 68, 80)'],
      ['2130', 'rgb(33, 66, 77)'],
      ['2140', 'rgb(31, 63, 74)'],
      ['2150', 'rgb(30, 60, 71)'],
      ['2200', 'rgb(28, 57, 68)'],
      ['2210', 'rgb(27, 55, 64)'],
      ['2220', 'rgb(25, 52, 61)'],
      ['2230', 'rgb(24, 49, 58)'],
      ['2240', 'rgb(22, 47, 55)'],
      ['2250', 'rgb(21, 44, 52)'],
      ['2300', 'rgb(19, 41, 49)'],
      ['2310', 'rgb(18, 39, 46)'],
      ['2320', 'rgb(16, 36, 43)'],
      ['2330', 'rgb(15, 33, 39)'],
      ['2340', 'rgb(13, 30, 36)'],
      ['2350', 'rgb(12, 28, 33)']
    ];
  }

  /**
   *
   * @param {string} timezone
   * @return  {object}
   */
  static findTimezone(timezone) {
    for (let i = 0; i < this.LIST.length; i++) {
      if (timezone == this.LIST[i].utc) {
        return this.LIST[i];
      }
    }
    return null;
  }

  /**
   * Find color definition
   *
   * @param {String} targetTime
   * @return {String}
   */
  static findColor(targetTime) {
    let time = null;
    let color = null;
    //console.log(WorldClockTimeZones.COLOR_DEFINITIONS);
    for (let i in this.COLOR_DEFINITIONS) {
      time = this.COLOR_DEFINITIONS[i][0];
      color = this.COLOR_DEFINITIONS[i][1];
      //console.log(`${time} > ${targetTime}`);
      if (time >= targetTime) {
        break;
      }
    }
    //console.log(`${time} >= ${targetTime} | ${color}`);
    return color;
  }

};
